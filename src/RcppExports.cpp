// This file was generated by Rcpp::compileAttributes
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

// rcpp_hello_world
List rcpp_hello_world();
RcppExport SEXP NPCluster_rcpp_hello_world() {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    __result = Rcpp::wrap(rcpp_hello_world());
    return __result;
END_RCPP
}
// createEngine
Rcpp::List createEngine(bool sort);
RcppExport SEXP NPCluster_createEngine(SEXP sortSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< bool >::type sort(sortSEXP);
    __result = Rcpp::wrap(createEngine(sort));
    return __result;
END_RCPP
}
// accessEngine
int accessEngine(SEXP sexp);
RcppExport SEXP NPCluster_accessEngine(SEXP sexpSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< SEXP >::type sexp(sexpSEXP);
    __result = Rcpp::wrap(accessEngine(sexp));
    return __result;
END_RCPP
}
// computePmfAndNeighborhoods
Rcpp::List computePmfAndNeighborhoods(SEXP sexp, int n0, const Rcpp::IntegerVector& nVec, double epsilon, double epsilon2, int K, int N, const Rcpp::NumericVector& Y, const Rcpp::NumericVector& Xsd, const Rcpp::IntegerVector& rowSubsetI, const Rcpp::IntegerVector& CmVec, const int n2, const Rcpp::NumericVector& phiV, const double tau, const double tau0, const int maxNeighborhoodSize, const double cutOff);
RcppExport SEXP NPCluster_computePmfAndNeighborhoods(SEXP sexpSEXP, SEXP n0SEXP, SEXP nVecSEXP, SEXP epsilonSEXP, SEXP epsilon2SEXP, SEXP KSEXP, SEXP NSEXP, SEXP YSEXP, SEXP XsdSEXP, SEXP rowSubsetISEXP, SEXP CmVecSEXP, SEXP n2SEXP, SEXP phiVSEXP, SEXP tauSEXP, SEXP tau0SEXP, SEXP maxNeighborhoodSizeSEXP, SEXP cutOffSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< SEXP >::type sexp(sexpSEXP);
    Rcpp::traits::input_parameter< int >::type n0(n0SEXP);
    Rcpp::traits::input_parameter< const Rcpp::IntegerVector& >::type nVec(nVecSEXP);
    Rcpp::traits::input_parameter< double >::type epsilon(epsilonSEXP);
    Rcpp::traits::input_parameter< double >::type epsilon2(epsilon2SEXP);
    Rcpp::traits::input_parameter< int >::type K(KSEXP);
    Rcpp::traits::input_parameter< int >::type N(NSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type Y(YSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type Xsd(XsdSEXP);
    Rcpp::traits::input_parameter< const Rcpp::IntegerVector& >::type rowSubsetI(rowSubsetISEXP);
    Rcpp::traits::input_parameter< const Rcpp::IntegerVector& >::type CmVec(CmVecSEXP);
    Rcpp::traits::input_parameter< const int >::type n2(n2SEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type phiV(phiVSEXP);
    Rcpp::traits::input_parameter< const double >::type tau(tauSEXP);
    Rcpp::traits::input_parameter< const double >::type tau0(tau0SEXP);
    Rcpp::traits::input_parameter< const int >::type maxNeighborhoodSize(maxNeighborhoodSizeSEXP);
    Rcpp::traits::input_parameter< const double >::type cutOff(cutOffSEXP);
    __result = Rcpp::wrap(computePmfAndNeighborhoods(sexp, n0, nVec, epsilon, epsilon2, K, N, Y, Xsd, rowSubsetI, CmVec, n2, phiV, tau, tau0, maxNeighborhoodSize, cutOff));
    return __result;
END_RCPP
}
// computePdpLogLikelihood
Rcpp::List computePdpLogLikelihood(SEXP sexp, const int k, const Rcpp::NumericMatrix& X, const Rcpp::NumericMatrix& A, const Rcpp::IntegerMatrix& S, const int G, const int N, const double tau, const double tau0, const double tauInt, bool colSums);
RcppExport SEXP NPCluster_computePdpLogLikelihood(SEXP sexpSEXP, SEXP kSEXP, SEXP XSEXP, SEXP ASEXP, SEXP SSEXP, SEXP GSEXP, SEXP NSEXP, SEXP tauSEXP, SEXP tau0SEXP, SEXP tauIntSEXP, SEXP colSumsSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< SEXP >::type sexp(sexpSEXP);
    Rcpp::traits::input_parameter< const int >::type k(kSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericMatrix& >::type X(XSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericMatrix& >::type A(ASEXP);
    Rcpp::traits::input_parameter< const Rcpp::IntegerMatrix& >::type S(SSEXP);
    Rcpp::traits::input_parameter< const int >::type G(GSEXP);
    Rcpp::traits::input_parameter< const int >::type N(NSEXP);
    Rcpp::traits::input_parameter< const double >::type tau(tauSEXP);
    Rcpp::traits::input_parameter< const double >::type tau0(tau0SEXP);
    Rcpp::traits::input_parameter< const double >::type tauInt(tauIntSEXP);
    Rcpp::traits::input_parameter< bool >::type colSums(colSumsSEXP);
    __result = Rcpp::wrap(computePdpLogLikelihood(sexp, k, X, A, S, G, N, tau, tau0, tauInt, colSums));
    return __result;
END_RCPP
}
// fastTabulate
Rcpp::IntegerVector fastTabulate(const Rcpp::IntegerMatrix& mat, const int K);
RcppExport SEXP NPCluster_fastTabulate(SEXP matSEXP, SEXP KSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< const Rcpp::IntegerMatrix& >::type mat(matSEXP);
    Rcpp::traits::input_parameter< const int >::type K(KSEXP);
    __result = Rcpp::wrap(fastTabulate(mat, K));
    return __result;
END_RCPP
}
